#version 450

#include "header/math.frag"

layout(set = 0, binding = 0) uniform sampler2DMS depth;

layout(location = 0) in VertexData {
    vec2 tex_coord;
} vertex;

layout(location = 0) out vec4 out_color;

vec4 BlurH (sampler2D source, vec2 size, vec2 uv, float radius) {

	if (radius >= 1.0)
	{
		vec4 A = vec4(0.0); 
		vec4 C = vec4(0.0); 

		float width = 1.0 / size.x;

		float divisor = 0.0; 
        float weight = 0.0;
        
        float radiusMultiplier = 1.0 / radius;
        
        // Hardcoded for radius 20 (normally we input the radius
        // in there), needs to be literal here
        
		for (float x = -20.0; x <= 20.0; x++)
		{
			A = texture(source, uv + vec2(x * width, 0.0));
            
            	weight = s_curve(1.0 - (abs(x) * radiusMultiplier)); 
            
            	C += A * weight; 
            
			divisor += weight; 
		}

		return vec4(C.r / divisor, C.g / divisor, C.b / divisor, 1.0);
	}

	return texture(source, uv);
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    
    vec2 uv = fragCoord.xy / iResolution.xy;
    
    // Apply horizontal blur to final output
	fragColor = BlurH(iChannel0, iResolution.xy, uv, 20.0);
}